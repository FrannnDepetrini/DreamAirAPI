// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241029005312_fourteenthMigration")]
    partial class fourteenthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Domain.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Arrival")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateBack")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateGo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Departure")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FreeEconomicSeats")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FreeFirstClassSeats")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PriceDefault")
                        .HasColumnType("REAL");

                    b.Property<string>("TimeArrivalBack")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeArrivalGo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeDepartureBack")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeDepartureGo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalAmountEconomic")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalAmountFirstClass")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Travel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserAirlineId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserAirlineId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Airline = "Emirates",
                            Arrival = "Buenos Aires (Bsas)",
                            DateGo = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departure = "Rosario (Ros)",
                            Duration = "3hs",
                            FreeEconomicSeats = 0,
                            FreeFirstClassSeats = 0,
                            PriceDefault = 85000f,
                            TimeArrivalGo = "15:00",
                            TimeDepartureGo = "12:00",
                            TotalAmountEconomic = 100,
                            TotalAmountFirstClass = 25,
                            Travel = "Ida",
                            UserAirlineId = 2
                        },
                        new
                        {
                            Id = 2,
                            Airline = "Flybondi",
                            Arrival = "Buenos Aires (Bsas)",
                            DateBack = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateGo = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departure = "Rosario (Ros)",
                            Duration = "3hs",
                            FreeEconomicSeats = 0,
                            FreeFirstClassSeats = 0,
                            PriceDefault = 85000f,
                            TimeArrivalBack = "01:00",
                            TimeArrivalGo = "15:00",
                            TimeDepartureBack = "22:00",
                            TimeDepartureGo = "12:00",
                            TotalAmountEconomic = 100,
                            TotalAmountFirstClass = 25,
                            Travel = "IDAyVUELTA",
                            UserAirlineId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassSeat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Seat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.UserAdmin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.ToTable("UserAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserAirline", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("UserAirlines");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "Emirates@gmail.com",
                            Password = "ba2436bd25a09dd572c044797e6978eaa9c498fb36fa0f59fb672ca03cc3faf7",
                            Role = "airline",
                            Name = "Emirates"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Flybondi@gmail.com",
                            Password = "70b9b5d2b27a567b84e80e7213fa3223b4a2332ac0725bb10b3f0761c892e9ca",
                            Role = "airline",
                            Name = "Flybondi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserClient", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dni")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("UserClients");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "joako.tanlon@gmail.com",
                            Password = "54f4b7d00e3bd65c83d48611676db7d46aea0dd2e1d9367ec22b726e9bfdaf2e",
                            Role = "cliente",
                            Age = 22,
                            Dni = 44290276,
                            LastName = "Tanlongo",
                            Name = "Joaquin",
                            Nationality = "Argentino",
                            Phone = "3412122907"
                        },
                        new
                        {
                            Id = 5,
                            Email = "frandepe7@gmail.com",
                            Password = "cd982f7c8f2a4cc48b615887fa6aa97a6127d8cc87046ccc955a45454e1e27b4",
                            Role = "cliente",
                            Age = 19,
                            Dni = 45838091,
                            LastName = "Depetrini",
                            Name = "Francisco",
                            Nationality = "Argentino",
                            Phone = "3472582334"
                        },
                        new
                        {
                            Id = 6,
                            Email = "marmax0504@gmail.com",
                            Password = "d7d4e80d1597ec0d878279dbde7fa7623924f8f06d24ce477b5f20f686b85cbe",
                            Role = "cliente",
                            Age = 21,
                            Dni = 44778419,
                            LastName = "Martin",
                            Name = "Maximo",
                            Nationality = "Argentino",
                            Phone = "3496502453"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Flight", b =>
                {
                    b.HasOne("Domain.Entities.UserAirline", "UserAirline")
                        .WithMany("Flights")
                        .HasForeignKey("UserAirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAirline");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserClient", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserAdmin", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.UserAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.UserAirline", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.UserAirline", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.UserClient", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.UserClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Flight", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Domain.Entities.UserAirline", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Domain.Entities.UserClient", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
